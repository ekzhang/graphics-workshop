import { MonitorBinding } from '../../../common/binding/monitor';
import { ValueController } from '../../../common/controller/value';
import { Buffer } from '../../../common/model/buffered-value';
import { LabeledController } from '../../labeled/controller/labeled';
import { LabeledProps } from '../../labeled/view/labeled';
import { Blade } from '../model/blade';
interface Config<T> {
    binding: MonitorBinding<T>;
    blade: Blade;
    props: LabeledProps;
    valueController: ValueController<Buffer<T>>;
}
/**
 * @hidden
 */
export declare class MonitorBindingController<T> extends LabeledController<ValueController<Buffer<T>>> {
    readonly binding: MonitorBinding<T>;
    constructor(doc: Document, config: Config<T>);
    onDispose(): void;
}
export {};
