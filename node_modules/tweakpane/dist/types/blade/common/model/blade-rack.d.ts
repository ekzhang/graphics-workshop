import { Emitter } from '../../../common/model/emitter';
import { View } from '../../../common/view/view';
import { Class } from '../../../misc/type-util';
import { FolderController } from '../../folder/controller/folder';
import { BladeController } from '../controller/blade';
import { InputBindingController } from '../controller/input-binding';
import { MonitorBindingController } from '../controller/monitor-binding';
/**
 * @hidden
 */
export interface BladeRackEvents {
    add: {
        bladeController: BladeController<View>;
        index: number;
        isRoot: boolean;
        sender: BladeRack;
    };
    remove: {
        bladeController: BladeController<View>;
        isRoot: boolean;
        sender: BladeRack;
    };
    folderfold: {
        folderController: FolderController;
        sender: BladeRack;
    };
    inputchange: {
        bindingController: InputBindingController<unknown>;
        sender: BladeRack;
    };
    layout: {
        sender: BladeRack;
    };
    monitorupdate: {
        bindingController: MonitorBindingController<unknown>;
        sender: BladeRack;
    };
}
/**
 * @hidden
 */
export declare class BladeRack {
    readonly emitter: Emitter<BladeRackEvents>;
    private bcSet_;
    constructor();
    get children(): BladeController<View>[];
    add(bc: BladeController<View>, opt_index?: number): void;
    remove(bc: BladeController<View>): void;
    find<B extends BladeController<View>>(controllerClass: Class<B>): B[];
    private onSetAdd_;
    private onSetRemove_;
    private onChildLayout_;
    private onChildViewPropsChange_;
    private onChildDispose_;
    private onChildInputChange_;
    private onChildMonitorUpdate_;
    private onChildFolderFold_;
    private onDescendantLayout_;
    private onDescendantInputChange_;
    private onDescendaantMonitorUpdate_;
    private onDescendantFolderFold_;
}
