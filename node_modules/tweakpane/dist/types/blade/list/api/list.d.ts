import { ListItem } from '../../../common/constraint/list';
import { ListController } from '../../../common/controller/list';
import { BladeApi, LabelableApi } from '../../common/api/blade';
import { ApiChangeEvents } from '../../common/api/types';
import { LabeledController } from '../../labeled/controller/labeled';
export declare class ListBladeApi<T> extends BladeApi<LabeledController<ListController<T>>> implements LabelableApi {
    private readonly emitter_;
    constructor(controller: LabeledController<ListController<T>>);
    get label(): string | undefined;
    set label(label: string | undefined);
    get options(): ListItem<T>[];
    set options(options: ListItem<T>[]);
    get value(): T;
    set value(value: T);
    on<EventName extends keyof ApiChangeEvents<T>>(eventName: EventName, handler: (ev: ApiChangeEvents<T>[EventName]['event']) => void): this;
}
