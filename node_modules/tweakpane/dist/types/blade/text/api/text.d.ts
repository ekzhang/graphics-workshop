import { TextController } from '../../../common/controller/text';
import { Formatter } from '../../../common/converter/formatter';
import { BladeApi, LabelableApi } from '../../common/api/blade';
import { ApiChangeEvents } from '../../common/api/types';
import { LabeledController } from '../../labeled/controller/labeled';
export declare class TextBladeApi<T> extends BladeApi<LabeledController<TextController<T>>> implements LabelableApi {
    private readonly emitter_;
    constructor(controller: LabeledController<TextController<T>>);
    get label(): string | undefined;
    set label(label: string | undefined);
    get formatter(): Formatter<T>;
    set formatter(formatter: Formatter<T>);
    get value(): T;
    set value(value: T);
    on<EventName extends keyof ApiChangeEvents<T>>(eventName: EventName, handler: (ev: ApiChangeEvents<T>[EventName]['event']) => void): this;
}
