import { Emitter } from './emitter';
import { ValueEvents } from './value';
export interface ValueMapEvents<O extends Record<string, unknown>> {
    change: {
        key: keyof O;
        sender: ValueMap<O>;
    };
}
export declare class ValueMap<O extends Record<string, unknown>> {
    readonly emitter: Emitter<ValueMapEvents<O>>;
    private valMap_;
    constructor(initialValue: O);
    get<Key extends keyof O>(key: Key): O[Key];
    set<Key extends keyof O>(key: Key, value: O[Key]): void;
    valueEmitter<Key extends keyof O>(key: Key): Emitter<ValueEvents<O[Key]>>;
}
