import { MonitorParams } from '../blade/common/api/types';
import { MonitorBindingController } from '../blade/common/controller/monitor-binding';
import { BindingReader } from '../common/binding/binding';
import { BindingTarget } from '../common/binding/target';
import { ValueController } from '../common/controller/value';
import { Buffer } from '../common/model/buffered-value';
import { BufferedValue } from '../common/model/buffered-value';
import { ViewProps } from '../common/model/view-props';
import { BasePlugin } from '../plugin';
interface BindingArguments<T> {
    initialValue: T;
    params: MonitorParams;
    target: BindingTarget;
}
interface ControllerArguments<T> {
    document: Document;
    params: MonitorParams;
    value: BufferedValue<T>;
    viewProps: ViewProps;
}
/**
 * A monitor binding plugin interface.
 * @template T The type of the value.
 */
export interface MonitorBindingPlugin<T> extends BasePlugin {
    accept: {
        /**
         * @param exValue The value input by users.
         * @param params The additional parameters specified by users.
         * @return A typed value if the plugin accepts the input, or null if the plugin sees them off and pass them to the next plugin.
         */
        (exValue: unknown, params: MonitorParams): T | null;
    };
    /**
     * Configurations of the binding.
     */
    binding: {
        /**
         * Creates a value reader from the user input.
         */
        reader: {
            /**
             * @param args The arguments for binding.
             * @return A value reader.
             */
            (args: BindingArguments<T>): BindingReader<T>;
        };
        /**
         * Determinates the default buffer size of the plugin.
         */
        defaultBufferSize?: {
            /**
             * @param params The additional parameters specified by users.
             * @return The default buffer size
             */
            (params: MonitorParams): number;
        };
    };
    /**
     * Creates a custom controller for the plugin.
     */
    controller: {
        /**
         * @param args The arguments for creating a controller.
         * @return A custom controller that contains a custom view.
         */
        (args: ControllerArguments<T>): ValueController<Buffer<T>>;
    };
}
export declare function createController<T>(plugin: MonitorBindingPlugin<T>, args: {
    document: Document;
    params: MonitorParams;
    target: BindingTarget;
}): MonitorBindingController<T> | null;
export {};
